(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app;

module.exports = app = (function() {
  function app() {}

  return app;

})();

app.models = (function() {
  function models() {}

  return models;

})();

app.views = (function() {
  function views() {}

  return views;

})();

app.controllers = (function() {
  function controllers() {}

  return controllers;

})();

app.lib = (function() {
  function lib() {}

  return lib;

})();

require('./lib/TemplateLoader');

require('./lib/DOMFileSystem');

require('./controllers/Application');

require('./controllers/Router');

require('./models/Person');

require('./models/PersonCollection');

require('./views/Error');

require('./views/Feed');

require('./views/Friends');

require('./views/Login');

require('./views/Person');

require('./views/Post');

require('./views/PostUI');

require('./views/Revoke');

require('./views/Shell');

require('./views/Welcome');

},{"./controllers/Application":2,"./controllers/Router":3,"./lib/DOMFileSystem":5,"./lib/TemplateLoader":6,"./models/Person":8,"./models/PersonCollection":9,"./views/Error":10,"./views/Feed":11,"./views/Friends":12,"./views/Login":13,"./views/Person":14,"./views/Post":15,"./views/PostUI":16,"./views/Revoke":17,"./views/Shell":18,"./views/Welcome":19}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app;

app = require('../app');

app.controllers.Application = (function() {
  function Application() {
    this.user = null;
    this.shell = null;
    this.router = null;
    this.models = {};
    this.views = {};
    this.templateLoader = new app.lib.TemplateLoader();
  }

  return Application;

})();

},{"../app":1}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.controllers.Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    return Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.routes = {
    "": "welcome",
    me: "me",
    "me/friends": "myfriends",
    "person/:id": "person",
    "person/:id/friends": "friends",
    "person/:id/mutualfriends": "mutualfriends",
    "person/:id/feed": "feed",
    revoke: "revoke",
    post: "post",
    postui: "postui"
  };

  Router.prototype.initialize = function() {
    return this.welcomeView = new app.views.Welcome({
      model: fb.user
    });
  };

  Router.prototype.welcome = function() {
    return $("#content").html(this.welcomeView.el);
  };

  Router.prototype.me = function() {
    return this.person("me");
  };

  Router.prototype.myfriends = function() {
    return this.friends("me");
  };

  Router.prototype.person = function(id) {
    var e;
    $("#content").html("<div class=\"breadcrumb api\">FB.api(\"/" + id + "\");</div>");
    try {
      return FB.api("/" + id, (function(_this) {
        return function(response) {
          if (response.error) {
            return _this.showErrorPage();
          } else {
            return $("#content").append(new app.views.Person({
              model: new app.models.Person(response)
            }).el);
          }
        };
      })(this));
    } catch (_error) {
      e = _error;
      return this.showErrorPage();
    }
  };

  Router.prototype.friends = function(id) {
    var e;
    $("#content").html("<div class=\"breadcrumb api\">FB.api(\"/" + id + "/friends\");</div>");
    try {
      return FB.api("/" + id + "/friends?limit=20", (function(_this) {
        return function(response) {
          if (response.error) {
            return _this.showErrorPage();
          } else {
            return $("#content").append(new app.views.Friends({
              model: new Backbone.Model(response)
            }).el);
          }
        };
      })(this));
    } catch (_error) {
      e = _error;
      return this.showErrorPage();
    }
  };

  Router.prototype.mutualfriends = function(id) {
    var e;
    $("#content").html("<div class=\"breadcrumb api\">FB.api(\"/" + id + "/mutualfriends\");</div>");
    try {
      return FB.api("/" + id + "/mutualfriends?limit=20", (function(_this) {
        return function(response) {
          if (response.error) {
            return _this.showErrorPage();
          } else {
            return $("#content").append(new app.views.Friends({
              model: new Backbone.Model(response)
            }).el);
          }
        };
      })(this));
    } catch (_error) {
      e = _error;
      return this.showErrorPage();
    }
  };

  Router.prototype.feed = function(id) {
    var e;
    $("#content").html("<div class=\"breadcrumb api\">FB.api(\"/" + id + "/feed\");</div>");
    try {
      return FB.api("/" + id + "/feed?limit=20", (function(_this) {
        return function(response) {
          if (response.error) {
            return _this.showErrorPage();
          } else {
            return $("#content").append(new app.views.Feed({
              model: new Backbone.Model(response)
            }).el);
          }
        };
      })(this));
    } catch (_error) {
      e = _error;
      return this.showErrorPage();
    }
  };

  Router.prototype.post = function() {
    $("#content").html("<div class=\"breadcrumb api\">FB.api(\"/me/feed\", \"post\", data);</div>");
    return $("#content").append(new app.views.Post().el);
  };

  Router.prototype.postui = function() {
    $("#content").html("<div class=\"breadcrumb api\">FB.ui();</div>");
    return $("#content").append(new app.views.PostUI().el);
  };

  Router.prototype.revoke = function() {
    $("#content").html("<div class=\"breadcrumb api\">FB.api(\"/me/permissions\", \"delete\");</div>");
    return $("#content").append(new app.views.Revoke().el);
  };

  Router.prototype.showErrorPage = function() {
    return $("#content").append(new app.views.Error().el);
  };

  return Router;

})(Backbone.Router);

},{"../app":1,"../fb":4}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb;

app = require('./app');

fb = new app.controllers.Application;

module.exports = fb;

},{"./app":1}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app;

app = require('../app');

app.lib.DOMFileSystem = (function() {
  function DOMFileSystem() {}

  DOMFileSystem.prototype.readTemplateFile = function($template) {
    var el;
    if ((el = $('#' + $template)) != null) {
      return el.text();
    } else {
      throw Liquid.FileSystemError("Template not found: " + $template);
    }
  };

  return DOMFileSystem;

})();

Liquid.Template.fileSystem = new app.lib.DOMFileSystem;

},{"../app":1}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app;

app = require('../app');

app.lib.TemplateLoader = (function() {
  function TemplateLoader() {
    this.templates = {};
  }

  TemplateLoader.prototype.load = function(names, callback) {
    var deferreds;
    deferreds = [];
    $.each(names, (function(_this) {
      return function(index, name) {
        if (app.views[name]) {
          return deferreds.push($.get("tpl/" + name.toLowerCase() + ".liquid", function(template) {
            return _this.templates[name] = Liquid.Template.parse(template);
          }));
        } else {
          return alert(name + " not found");
        }
      };
    })(this));
    return $.when.apply(null, deferreds).done(callback);
  };

  TemplateLoader.prototype.get = function(name) {
    return this.templates[name];
  };

  return TemplateLoader;

})();

},{"../app":1}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb;

app = require('./app');

fb = require('./fb');

(function(d) {
  var id, js, ref;
  id = "facebook-jssdk";
  ref = d.getElementsByTagName("script")[0];
  if (d.getElementById(id)) {
    return;
  }
  js = d.createElement("script");
  js.id = id;
  js.async = true;
  js.src = "//connect.facebook.net/en_US/all.js";
  return ref.parentNode.insertBefore(js, ref);
})(document);

window.fbAsyncInit = function() {
  FB.Event.subscribe("auth.statusChange", function(response) {
    return $(document).trigger("fbStatusChange", response);
  });
  return FB.init({
    appId: "1478930342328388",
    channelUrl: "//localhost/channel.html",
    status: true,
    cookie: true,
    xfbml: true
  });
};

$(document).on("ready", function() {
  fb.user = new app.models.Person();
  return fb.templateLoader.load(["Shell", "Welcome", "Login", "Person", "Friends", "Feed", "Post", "PostUI", "Error", "Revoke"], function() {
    fb.shell = new app.views.Shell({
      el: "#shell",
      model: fb.user
    });
    fb.router = new app.controllers.Router();
    return Backbone.history.start();
  });
});

$(document).on("fbStatusChange", function(event, data) {
  if (data.status === "connected") {
    return FB.api("/me", function(response) {
      return fb.user.set(response);
    });
  } else {
    return fb.user.set(fb.user.defaults);
  }
});

$(document).on("logout", function() {
  FB.logout();
  return false;
});

$(document).on("login", function() {
  FB.login((function() {}), {
    scope: "publish_actions"
  });
  return false;
});

},{"./app":1,"./fb":4}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

app.models.Person = (function(_super) {
  __extends(Person, _super);

  function Person() {
    return Person.__super__.constructor.apply(this, arguments);
  }

  Person.prototype.defaults = {
    id: "",
    name: "",
    first_name: "",
    last_name: "",
    gender: "",
    username: "",
    link: "",
    locale: "",
    timezone: ""
  };

  return Person;

})(Backbone.Model);

},{"../app":1}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

app.models.PersonCollection = (function(_super) {
  __extends(PersonCollection, _super);

  function PersonCollection() {
    return PersonCollection.__super__.constructor.apply(this, arguments);
  }

  PersonCollection.prototype.model = app.models.Person;

  return PersonCollection;

})(Backbone.Collection);

},{"../app":1}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.Error = (function(_super) {
  __extends(Error, _super);

  function Error() {
    return Error.__super__.constructor.apply(this, arguments);
  }

  Error.prototype.initialize = function() {
    this.template = fb.templateLoader.get("Error");
    return this.render();
  };

  Error.prototype.render = function() {
    this.$el.html(this.template.render());
    return this;
  };

  Error.prototype.events = {
    "click .retry": "retry"
  };

  Error.prototype.retry = function() {
    return Backbone.history.loadUrl(Backbone.history.fragment);
  };

  return Error;

})(Backbone.View);

},{"../app":1,"../fb":4}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

app.views.Feed = (function(_super) {
  __extends(Feed, _super);

  function Feed() {
    return Feed.__super__.constructor.apply(this, arguments);
  }

  Feed.prototype.initialize = function() {
    this.template = fb.templateLoader.get("Feed");
    this.model.on("change", this.render, this);
    return this.render();
  };

  Feed.prototype.render = function() {
    this.$el.html(this.template.render(this.model.toJSON()));
    return this;
  };

  Feed.prototype.events = {
    "click .next": "next",
    "click .previous": "previous"
  };

  Feed.prototype.next = function() {
    this.fetch(this.model.get("paging").next);
    return false;
  };

  Feed.prototype.previous = function() {
    this.fetch(this.model.get("paging").previous);
    return false;
  };

  Feed.prototype.fetch = function(url) {
    var self;
    self = this;
    return $.ajax({
      url: url,
      dataType: "json"
    }).done(function(response) {
      return self.model.set(response);
    }).fail(function(e) {
      return alert("Error fetching data");
    });
  };

  return Feed;

})(Backbone.View);

},{"../app":1}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.Friends = (function(_super) {
  __extends(Friends, _super);

  function Friends() {
    return Friends.__super__.constructor.apply(this, arguments);
  }

  Friends.prototype.initialize = function() {
    this.template = fb.templateLoader.get("Friends");
    this.model.on("change", this.render, this);
    return this.render();
  };

  Friends.prototype.render = function() {
    this.$el.html(this.template.render(this.model.toJSON()));
    return this;
  };

  Friends.prototype.events = {
    "click .next": "next",
    "click .previous": "previous"
  };

  Friends.prototype.next = function() {
    this.fetch(this.model.get("paging").next);
    return false;
  };

  Friends.prototype.previous = function() {
    this.fetch(this.model.get("paging").previous);
    return false;
  };

  Friends.prototype.fetch = function(url) {
    var self;
    self = this;
    return $.ajax({
      url: url,
      dataType: "json"
    }).done(function(response) {
      return self.model.set(response);
    }).fail(function(e) {
      return alert("Error fetching data");
    });
  };

  return Friends;

})(Backbone.View);

},{"../app":1,"../fb":4}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.Login = (function(_super) {
  __extends(Login, _super);

  function Login() {
    return Login.__super__.constructor.apply(this, arguments);
  }

  Login.prototype.initialize = function() {
    this.template = fb.templateLoader.get("Login");
    this.model.on("change", this.render, this);
    return this.render();
  };

  Login.prototype.render = function() {
    this.$el.html(this.template.render(this.model.toJSON()));
    return this;
  };

  Login.prototype.events = {
    "click .login": "login",
    "click .logout": "logout"
  };

  Login.prototype.login = function(e) {
    $(document).trigger("login");
    return false;
  };

  Login.prototype.logout = function(e) {
    $(document).trigger("logout");
    return false;
  };

  return Login;

})(Backbone.View);

},{"../app":1,"../fb":4}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.Person = (function(_super) {
  __extends(Person, _super);

  function Person() {
    return Person.__super__.constructor.apply(this, arguments);
  }

  Person.prototype.initialize = function() {
    this.template = fb.templateLoader.get("Person");
    this.model.on("change", this.render, this);
    return this.render();
  };

  Person.prototype.render = function() {
    this.$el.html(this.template.render(this.model.toJSON()));
    return this;
  };

  return Person;

})(Backbone.View);

},{"../app":1,"../fb":4}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.Post = (function(_super) {
  __extends(Post, _super);

  function Post() {
    return Post.__super__.constructor.apply(this, arguments);
  }

  Post.prototype.initialize = function() {
    this.template = fb.templateLoader.get("Post");
    return this.render();
  };

  Post.prototype.render = function() {
    this.$el.html(this.template.render());
    return this;
  };

  Post.prototype.events = {
    "click .post": "postMessage"
  };

  Post.prototype.postMessage = function() {
    var status;
    status = {
      name: $(".itemName").val(),
      link: $(".link").val(),
      picture: $(".picture").val(),
      caption: $(".caption").val(),
      description: $(".description").val()
    };
    FB.api("/me/feed", "post", status, function(response) {
      if (response && response.id) {
        return alert("Your post was published.");
      } else {
        return alert("Your post was not published.");
      }
    });
    return false;
  };

  return Post;

})(Backbone.View);

},{"../app":1,"../fb":4}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.PostUI = (function(_super) {
  __extends(PostUI, _super);

  function PostUI() {
    return PostUI.__super__.constructor.apply(this, arguments);
  }

  PostUI.prototype.initialize = function() {
    this.template = fb.templateLoader.get("PostUI");
    return this.render();
  };

  PostUI.prototype.render = function() {
    this.$el.html(this.template.render());
    return this;
  };

  PostUI.prototype.events = {
    "click .post": "postMessage"
  };

  PostUI.prototype.postMessage = function() {
    FB.ui({
      method: "feed",
      name: "Sociogram Application",
      link: "http://coenraets.org/blog/sociogram",
      picture: "http://coenraets.org/sociogram/img/sociogram.jpg",
      caption: "by Christophe Coenraets",
      description: "Sociogram is a simple application that shows how to use the Facebook JavaScript SDK and the Graph API."
    }, function(response) {
      if (response && response.id) {
        return alert("Your post was published.");
      } else {
        return alert("Your post was not published.");
      }
    });
    return false;
  };

  return PostUI;

})(Backbone.View);

},{"../app":1,"../fb":4}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.Revoke = (function(_super) {
  __extends(Revoke, _super);

  function Revoke() {
    return Revoke.__super__.constructor.apply(this, arguments);
  }

  Revoke.prototype.initialize = function() {
    this.template = fb.templateLoader.get("Revoke");
    return this.render();
  };

  Revoke.prototype.render = function() {
    this.$el.html(this.template.render());
    return this;
  };

  Revoke.prototype.events = {
    "click .revoke": "revoke"
  };

  Revoke.prototype.revoke = function() {
    FB.api("/me/permissions", "delete", function() {
      alert("Permissions revoked");
      return FB.getLoginStatus();
    });
    return false;
  };

  return Revoke;

})(Backbone.View);

},{"../app":1,"../fb":4}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.Shell = (function(_super) {
  __extends(Shell, _super);

  function Shell() {
    return Shell.__super__.constructor.apply(this, arguments);
  }

  Shell.prototype.initialize = function() {
    this.template = fb.templateLoader.get("Shell");
    return this.render();
  };

  Shell.prototype.render = function() {
    this.$el.html(this.template.render(this.model.toJSON()));
    new app.views.Login({
      model: this.model,
      el: "#login"
    });
    return this;
  };

  Shell.prototype.events = {
    "mousedown li": "mouseDown",
    "mouseup li": "mouseUp",
    "click .btn-login": "login"
  };

  Shell.prototype.mouseDown = function(e) {
    return $(e.currentTarget).addClass("active");
  };

  Shell.prototype.mouseUp = function() {
    return $("li").removeClass("active");
  };

  Shell.prototype.login = function() {
    $(document).trigger("login");
    return false;
  };

  return Shell;

})(Backbone.View);

},{"../app":1,"../fb":4}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, fb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('../app');

fb = require('../fb');

app.views.Welcome = (function(_super) {
  __extends(Welcome, _super);

  function Welcome() {
    return Welcome.__super__.constructor.apply(this, arguments);
  }

  Welcome.prototype.initialize = function() {
    var self;
    self = this;
    this.template = fb.templateLoader.get("Welcome");
    this.model.on("change", this.showHideButtons, this);
    return this.render();
  };

  Welcome.prototype.render = function() {
    this.$el.html(this.template.render());
    this.showHideButtons();
    return this;
  };

  Welcome.prototype.showHideButtons = function() {
    if (this.model.get("id") !== "") {
      $(".btn-login", this.el).addClass("hidden");
      return $(".btn-profile", this.el).removeClass("hidden");
    } else {
      $(".btn-login", this.el).removeClass("hidden");
      return $(".btn-profile", this.el).addClass("hidden");
    }
  };

  return Welcome;

})(Backbone.View);

},{"../app":1,"../fb":4}]},{},[7])
//@ sourceMappingURL=data:application/json;base64,
