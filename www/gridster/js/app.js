(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var AngryCat, AngryCatView, AngryCats, AngryCatsView, MyApp,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MyApp = new Backbone.Marionette.Application();

MyApp.addRegions({
  mainRegion: "#content"
});

AngryCat = (function(_super) {
  __extends(AngryCat, _super);

  function AngryCat() {
    return AngryCat.__super__.constructor.apply(this, arguments);
  }

  AngryCat.prototype.defaults = {
    votes: 0
  };

  AngryCat.prototype.addVote = function() {
    return this.set("votes", this.get("votes") + 1);
  };

  AngryCat.prototype.rankUp = function() {
    return this.set({
      rank: this.get("rank") - 1
    });
  };

  AngryCat.prototype.rankDown = function() {
    return this.set({
      rank: this.get("rank") + 1
    });
  };

  return AngryCat;

})(Backbone.Model);

AngryCats = (function(_super) {
  __extends(AngryCats, _super);

  function AngryCats() {
    return AngryCats.__super__.constructor.apply(this, arguments);
  }

  AngryCats.prototype.model = AngryCat;

  AngryCats.prototype.initialize = function(cats) {
    var cat, rank, _i, _len;
    rank = 1;
    for (_i = 0, _len = cats.length; _i < _len; _i++) {
      cat = cats[_i];
      cat.set("rank", rank++);
    }
    this.on("add", function(cat) {
      var error;
      if (!cat.get("rank")) {
        error = Error("Cat must have a rank defined before being added to the collection");
        error.name = "NoRankError";
        throw error;
      }
    });
    MyApp.on("rank:up", (function(_this) {
      return function(cat) {
        if (cat.get("rank") === 1) {
          return true;
        }
        _this.rankUp(cat);
        _this.sort();
        return _this.trigger("reset");
      };
    })(this));
    MyApp.on("rank:down", (function(_this) {
      return function(cat) {
        if (cat.get("rank") === _this.size()) {
          return true;
        }
        _this.rankDown(cat);
        _this.sort();
        return _this.trigger("reset");
      };
    })(this));
    return MyApp.on("cat:disqualify", (function(_this) {
      return function(cat) {
        var catsToUprank, disqualifiedRank;
        disqualifiedRank = cat.get("rank");
        catsToUprank = _this.filter(function(cat) {
          return cat.get("rank") > disqualifiedRank;
        });
        catsToUprank.forEach(function(cat) {
          return cat.rankUp();
        });
        return _this.trigger("reset");
      };
    })(this));
  };

  AngryCats.prototype.comparator = function(cat) {
    return cat.get("rank");
  };

  AngryCats.prototype.rankUp = function(cat) {
    var otherCat, rankToSwap;
    rankToSwap = cat.get("rank") - 1;
    otherCat = this.at(rankToSwap - 1);
    cat.rankUp();
    return otherCat.rankDown();
  };

  AngryCats.prototype.rankDown = function(cat) {
    var otherCat, rankToSwap;
    rankToSwap = cat.get("rank") + 1;
    otherCat = this.at(rankToSwap - 1);
    cat.rankDown();
    return otherCat.rankUp();
  };

  return AngryCats;

})(Backbone.Collection);

AngryCatView = (function(_super) {
  __extends(AngryCatView, _super);

  function AngryCatView() {
    return AngryCatView.__super__.constructor.apply(this, arguments);
  }

  AngryCatView.prototype.template = "#angry_cat-template";

  AngryCatView.prototype.tagName = "tr";

  AngryCatView.prototype.className = "angry_cat";

  AngryCatView.prototype.events = {
    "click .rank_up img": "rankUp",
    "click .rank_down img": "rankDown",
    "click a.disqualify": "disqualify"
  };

  AngryCatView.prototype.initialize = function() {
    return this.listenTo(this.model, "change:votes", this.render);
  };

  AngryCatView.prototype.rankUp = function() {
    this.model.addVote();
    return MyApp.trigger("rank:up", this.model);
  };

  AngryCatView.prototype.rankDown = function() {
    this.model.addVote();
    return MyApp.trigger("rank:down", this.model);
  };

  AngryCatView.prototype.disqualify = function() {
    MyApp.trigger("cat:disqualify", this.model);
    return this.model.destroy();
  };

  return AngryCatView;

})(Backbone.Marionette.ItemView);

AngryCatsView = (function(_super) {
  __extends(AngryCatsView, _super);

  function AngryCatsView() {
    return AngryCatsView.__super__.constructor.apply(this, arguments);
  }

  AngryCatsView.prototype.tagName = "table";

  AngryCatsView.prototype.id = "angry_cats";

  AngryCatsView.prototype.className = "table-striped table-bordered";

  AngryCatsView.prototype.template = "#angry_cats-template";

  AngryCatsView.prototype.itemView = AngryCatView;

  AngryCatsView.prototype.initialize = function() {
    return this.listenTo(this.collection, "sort", this.renderCollection);
  };

  AngryCatsView.prototype.appendHtml = function(collectionView, itemView) {
    return collectionView.$("tbody").append(itemView.el);
  };

  return AngryCatsView;

})(Backbone.Marionette.CompositeView);

MyApp.addInitializer(function(options) {
  var angryCatsView;
  angryCatsView = new AngryCatsView({
    collection: options.cats
  });
  return MyApp.mainRegion.show(angryCatsView);
});

$(function() {
  var cats;
  cats = new AngryCats([
    new AngryCat({
      name: "Wet Cat",
      image_path: "images/cat2.jpg"
    }), new AngryCat({
      name: "Bitey Cat",
      image_path: "images/cat1.jpg"
    }), new AngryCat({
      name: "Surprised Cat",
      image_path: "images/cat3.jpg"
    }), new AngryCat({
      name: "Cranky Cat",
      image_path: "images/cat4.jpg"
    })
  ]);
  return MyApp.start({
    cats: cats
  });
});

},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
