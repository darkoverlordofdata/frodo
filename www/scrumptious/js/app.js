(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var DEBUG_MODE, currentlySelectedPlaceElement, displayFriends, displayMealList, displayPlaces, displaySelectedMeal, getFriends, getNearby, handleGenericError, handleOGSuccess, handlePublishOGError, handleStatusChange, logResponse, meals, menuHandler, myFriends, nearbyPlaces, publishOGAction, reauthorizeForPublishPermissions, selectedFriends, selectedMealIndex, selectedPlaceID, selectedPlaceIndex, showPublishConfirmation, updateUserInfo;

DEBUG_MODE = false;

selectedMealIndex = -1;

selectedPlaceIndex = -1;

selectedPlaceID = null;

nearbyPlaces = null;

myFriends = null;

currentlySelectedPlaceElement = null;

selectedFriends = {};

meals = [
  {
    id: "cheeseburger",
    title: "Cheeseburger",
    url: "http://nodescrumptious.azurewebsites.net/meals/cheeseburger"
  }, {
    id: "chinese",
    title: "Chinese",
    url: "http://nodescrumptious.azurewebsites.net/meals/chinese"
  }, {
    id: "french",
    title: "French",
    url: "http://nodescrumptious.azurewebsites.net/meals/french"
  }, {
    id: "hotdog",
    title: "Hot Dog",
    url: "http://nodescrumptious.azurewebsites.net/meals/hotdog"
  }, {
    id: "indian",
    title: "Indian",
    url: "http://nodescrumptious.azurewebsites.net/meals/indian"
  }, {
    id: "italian",
    title: "Italian",
    url: "http://nodescrumptious.azurewebsites.net/meals/italian"
  }, {
    id: "pizza",
    title: "Pizza",
    url: "http://nodescrumptious.azurewebsites.net/meals/pizza"
  }
];

logResponse = function(response) {
  if (typeof console !== "undefined") {
    return console.log("The response was", response);
  }
};

handleStatusChange = function(response) {
  if (response.authResponse) {
    logResponse(response);
    window.location.hash = "#menu";
    return updateUserInfo(response);
  } else {
    return window.location.hash = "#login";
  }
};

updateUserInfo = function(response) {
  return FB.api("/me", {
    fields: "name,first_name,picture"
  }, function(response) {
    var output;
    logResponse(response);
    output = "";
    output += "<img src=\"" + response.picture.data.url + "\" width=\"25\" height=\"25\"></img>";
    output += " " + response.first_name;
    return $("#user-identity").html(output);
  });
};

handleOGSuccess = function() {
  logResponse("[handleOGSuccess] done.");
  showPublishConfirmation();
  selectedMealIndex = -1;
  selectedPlaceIndex = -1;
  selectedPlaceID = null;
  currentlySelectedPlaceElement = null;
  selectedFriends = {};
  $("#select-meal").html("Select one");
  $("#select-location").html("Select one");
  $("#select-friends").html("Select friends");
  return $("#announce").addClass("ui-disabled");
};

handleGenericError = function(e) {
  return logResponse("Error ..." + JSON.stringify(e));
};

handlePublishOGError = function(e) {
  var errorCode;
  logResponse("Error publishing ..." + JSON.stringify(e));
  errorCode = e.code;
  logResponse("Error code ..." + errorCode);
  if (errorCode === "200") {
    return reauthorizeForPublishPermissions();
  }
};

reauthorizeForPublishPermissions = function() {
  logResponse("[reauthorizeForPublishPermissions] asking for additional permissions.");
  return FB.login((function(response) {
    if (!response || response.error) {
      return handleGenericError(response.error);
    } else {
      return publishOGAction(response);
    }
  }), {
    scope: "publish_actions"
  });
};

publishOGAction = function(response) {
  var errorHandler, friendIDArrays, friendId, params;
  errorHandler = null;
  if (!response || response.error) {
    errorHandler = handlePublishOGError;
  } else {
    errorHandler = handleGenericError;
  }
  logResponse("Publishing action...");
  params = {
    meal: meals[selectedMealIndex].url
  };
  if (selectedPlaceID) {
    params.place = selectedPlaceID;
  }
  friendIDArrays = [];
  for (friendId in selectedFriends) {
    if (selectedFriends.hasOwnProperty(friendId)) {
      friendIDArrays.push(friendId);
    }
  }
  if (friendIDArrays.length > 0) {
    params.tags = friendIDArrays.join();
  }
  logResponse("Publish params " + JSON.stringify(params));
  return $.ajax({
    url: "/announce",
    type: "post",
    data: params
  }).success(function(result) {
    return handleOGSuccess(result);
  }).error(function(xhr) {
    try {
      response = JSON.parse(xhr.responseText);
      if (response.error && response.redirectUri) {
        return window.location = response.redirectUri;
      }
    } catch (_error) {}
  });
};

showPublishConfirmation = function() {
  $("#confirmation").append("<p>Publish successful</p>");
  return $("#confirmation").fadeOut(3000, function() {
    $("#confirmation").html("");
    return $("#confirmation").show();
  });
};

displayMealList = function() {
  var output, tmpl;
  logResponse("[displayMealList] displaying meal list.");
  tmpl = $("#meal_list_tmpl").html();
  output = Mustache.to_html(tmpl, meals);
  return $("#meal-list").html(output).listview("refresh");
};

displaySelectedMeal = function() {
  var meal, output, tmpl;
  logResponse("[displaySelectedMeal] displaying selected meal.");
  meal = meals[selectedMealIndex];
  tmpl = $("#selected_meal_tmpl").html();
  output = Mustache.to_html(tmpl, meal);
  return $("#selected_meal").html(output);
};

getNearby = function() {
  if (nearbyPlaces) {
    return;
  }
  logResponse("[getNearby] get nearby data.");
  return navigator.geolocation.getCurrentPosition(function(location) {
    logResponse(location);
    return $.ajax({
      url: "/search",
      data: {
        type: "place",
        q: "restaurant",
        center: location.coords.latitude + "," + location.coords.longitude,
        distance: 1000,
        fields: "id,name,picture"
      }
    }).success(function(response) {
      nearbyPlaces = response.data;
      logResponse(nearbyPlaces);
      return displayPlaces(nearbyPlaces);
    }).error(function(err) {
      return logResponse("Error fetching nearby place data.");
    });
  });
};

displayPlaces = function(places) {
  var output, tmpl;
  logResponse("[displayPlaces] displaying nearby list.");
  tmpl = $("#places_list_tmpl").html();
  output = Mustache.to_html(tmpl, places);
  return $("#places-list").html(output).listview("refresh");
};

getFriends = function() {
  if (myFriends) {
    return;
  }
  logResponse("[getFriends] get friend data.");
  return $.ajax({
    url: "/friends"
  }).success(function(response) {
    myFriends = response.data;
    logResponse(myFriends);
    return displayFriends(myFriends);
  }).error(function(err) {
    return logResponse("Error fetching friend data.");
  });
};

displayFriends = function(friends) {
  var output, tmpl;
  logResponse("[displayFriends] displaying friend list.");
  tmpl = $("#friends_list_tmpl").html();
  output = Mustache.to_html(tmpl, friends);
  return $("#friends-list").html(output).listview("refresh");
};

$(function() {
  $("#logout").click(function() {
    window.location = "/logout";
    return false;
  });
  $("#announce").click(function() {
    return publishOGAction(null);
  });
  $("#meal-list").on("click", "li", function() {
    selectedMealIndex = $(this).index();
    logResponse("Link in meal listview clicked... " + selectedMealIndex);
    return displaySelectedMeal();
  });
  $("#detail-meal-select").click(function() {
    $("#announce").removeClass("ui-disabled");
    return $("#select-meal").html(meals[selectedMealIndex].title);
  });
  $("#places-list").on("click", "li", function() {
    var selectionId, selectionStatus;
    selectionId = $(this).attr("data-name");
    logResponse("Selected place " + selectionId);
    selectionStatus = $(this).attr("data-icon");
    if (selectionStatus === "false") {
      if (currentlySelectedPlaceElement) {
        currentlySelectedPlaceElement.buttonMarkup({
          icon: false
        });
      }
      $(this).buttonMarkup({
        icon: "check"
      });
      selectedPlaceID = selectionId;
      selectedPlaceIndex = $(this).index();
      $("#select-location").html(nearbyPlaces[selectedPlaceIndex].name);
      return currentlySelectedPlaceElement = $(this);
    } else {
      $(this).buttonMarkup({
        icon: false
      });
      selectedPlaceID = null;
      selectedPlaceIndex = -1;
      return $("#select-location").html("Select one");
    }
  });
  return $("#friends-list").on("click", "li", function() {
    var friendId, friendNameArray, otherFriends, selectedIndex, selectionId, selectionStatus;
    selectionId = $(this).attr("data-name");
    logResponse("Selected friend " + selectionId);
    selectedIndex = $(this).index();
    selectionStatus = $(this).attr("data-icon");
    if (selectionStatus === "false") {
      $(this).buttonMarkup({
        icon: "check"
      });
      selectedFriends[selectionId] = myFriends[selectedIndex].name;
    } else {
      $(this).buttonMarkup({
        icon: false
      });
      delete selectedFriends[selectionId];
    }
    friendNameArray = [];
    for (friendId in selectedFriends) {
      if (selectedFriends.hasOwnProperty(friendId)) {
        friendNameArray.push(selectedFriends[friendId]);
      }
    }
    if (friendNameArray.length > 2) {
      otherFriends = friendNameArray.length - 1;
      $("#select-friends").html(friendNameArray[0] + " and " + otherFriends + " others");
    } else if (friendNameArray.length === 2) {
      $("#select-friends").html(friendNameArray[0] + " and " + friendNameArray[1]);
    } else if (friendNameArray.length === 1) {
      $("#select-friends").html(friendNameArray[0]);
    } else {
      $("#select-friends").html("Select friends");
    }
    return logResponse("Current select friends list: " + selectedFriends);
  });
});

$(document).delegate("#meals", "pageinit", function() {
  return displayMealList();
});

$("body").bind("hideOpenMenus", function() {
  return $("ul:jqmData(role='menu')").find("li > ul").hide();
});

menuHandler = function(e) {
  $("body").trigger("hideOpenMenus");
  $(this).find("li > ul").show();
  return e.stopPropagation();
};

$("ul:jqmData(role='menu') li > ul li").click(function(e) {
  $("body").trigger("hideOpenMenus");
  return e.stopPropagation();
});

$("body").delegate("ul:jqmData(role='menu')", "click", menuHandler);

$("body").click(function(e) {
  return $("body").trigger("hideOpenMenus");
});

},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvaG9tZS9icnVjZS9PcGVuU2hpZnQvZnJvZG8vdG1wL3NjcnVtcHRpb3VzL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS43LjFcbnZhciBERUJVR19NT0RFLCBjdXJyZW50bHlTZWxlY3RlZFBsYWNlRWxlbWVudCwgZGlzcGxheUZyaWVuZHMsIGRpc3BsYXlNZWFsTGlzdCwgZGlzcGxheVBsYWNlcywgZGlzcGxheVNlbGVjdGVkTWVhbCwgZ2V0RnJpZW5kcywgZ2V0TmVhcmJ5LCBoYW5kbGVHZW5lcmljRXJyb3IsIGhhbmRsZU9HU3VjY2VzcywgaGFuZGxlUHVibGlzaE9HRXJyb3IsIGhhbmRsZVN0YXR1c0NoYW5nZSwgbG9nUmVzcG9uc2UsIG1lYWxzLCBtZW51SGFuZGxlciwgbXlGcmllbmRzLCBuZWFyYnlQbGFjZXMsIHB1Ymxpc2hPR0FjdGlvbiwgcmVhdXRob3JpemVGb3JQdWJsaXNoUGVybWlzc2lvbnMsIHNlbGVjdGVkRnJpZW5kcywgc2VsZWN0ZWRNZWFsSW5kZXgsIHNlbGVjdGVkUGxhY2VJRCwgc2VsZWN0ZWRQbGFjZUluZGV4LCBzaG93UHVibGlzaENvbmZpcm1hdGlvbiwgdXBkYXRlVXNlckluZm87XG5cbkRFQlVHX01PREUgPSBmYWxzZTtcblxuc2VsZWN0ZWRNZWFsSW5kZXggPSAtMTtcblxuc2VsZWN0ZWRQbGFjZUluZGV4ID0gLTE7XG5cbnNlbGVjdGVkUGxhY2VJRCA9IG51bGw7XG5cbm5lYXJieVBsYWNlcyA9IG51bGw7XG5cbm15RnJpZW5kcyA9IG51bGw7XG5cbmN1cnJlbnRseVNlbGVjdGVkUGxhY2VFbGVtZW50ID0gbnVsbDtcblxuc2VsZWN0ZWRGcmllbmRzID0ge307XG5cbm1lYWxzID0gW1xuICB7XG4gICAgaWQ6IFwiY2hlZXNlYnVyZ2VyXCIsXG4gICAgdGl0bGU6IFwiQ2hlZXNlYnVyZ2VyXCIsXG4gICAgdXJsOiBcImh0dHA6Ly9ub2Rlc2NydW1wdGlvdXMuYXp1cmV3ZWJzaXRlcy5uZXQvbWVhbHMvY2hlZXNlYnVyZ2VyXCJcbiAgfSwge1xuICAgIGlkOiBcImNoaW5lc2VcIixcbiAgICB0aXRsZTogXCJDaGluZXNlXCIsXG4gICAgdXJsOiBcImh0dHA6Ly9ub2Rlc2NydW1wdGlvdXMuYXp1cmV3ZWJzaXRlcy5uZXQvbWVhbHMvY2hpbmVzZVwiXG4gIH0sIHtcbiAgICBpZDogXCJmcmVuY2hcIixcbiAgICB0aXRsZTogXCJGcmVuY2hcIixcbiAgICB1cmw6IFwiaHR0cDovL25vZGVzY3J1bXB0aW91cy5henVyZXdlYnNpdGVzLm5ldC9tZWFscy9mcmVuY2hcIlxuICB9LCB7XG4gICAgaWQ6IFwiaG90ZG9nXCIsXG4gICAgdGl0bGU6IFwiSG90IERvZ1wiLFxuICAgIHVybDogXCJodHRwOi8vbm9kZXNjcnVtcHRpb3VzLmF6dXJld2Vic2l0ZXMubmV0L21lYWxzL2hvdGRvZ1wiXG4gIH0sIHtcbiAgICBpZDogXCJpbmRpYW5cIixcbiAgICB0aXRsZTogXCJJbmRpYW5cIixcbiAgICB1cmw6IFwiaHR0cDovL25vZGVzY3J1bXB0aW91cy5henVyZXdlYnNpdGVzLm5ldC9tZWFscy9pbmRpYW5cIlxuICB9LCB7XG4gICAgaWQ6IFwiaXRhbGlhblwiLFxuICAgIHRpdGxlOiBcIkl0YWxpYW5cIixcbiAgICB1cmw6IFwiaHR0cDovL25vZGVzY3J1bXB0aW91cy5henVyZXdlYnNpdGVzLm5ldC9tZWFscy9pdGFsaWFuXCJcbiAgfSwge1xuICAgIGlkOiBcInBpenphXCIsXG4gICAgdGl0bGU6IFwiUGl6emFcIixcbiAgICB1cmw6IFwiaHR0cDovL25vZGVzY3J1bXB0aW91cy5henVyZXdlYnNpdGVzLm5ldC9tZWFscy9waXp6YVwiXG4gIH1cbl07XG5cbmxvZ1Jlc3BvbnNlID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiVGhlIHJlc3BvbnNlIHdhc1wiLCByZXNwb25zZSk7XG4gIH1cbn07XG5cbmhhbmRsZVN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gIGlmIChyZXNwb25zZS5hdXRoUmVzcG9uc2UpIHtcbiAgICBsb2dSZXNwb25zZShyZXNwb25zZSk7XG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIiNtZW51XCI7XG4gICAgcmV0dXJuIHVwZGF0ZVVzZXJJbmZvKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIiNsb2dpblwiO1xuICB9XG59O1xuXG51cGRhdGVVc2VySW5mbyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gIHJldHVybiBGQi5hcGkoXCIvbWVcIiwge1xuICAgIGZpZWxkczogXCJuYW1lLGZpcnN0X25hbWUscGljdHVyZVwiXG4gIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgdmFyIG91dHB1dDtcbiAgICBsb2dSZXNwb25zZShyZXNwb25zZSk7XG4gICAgb3V0cHV0ID0gXCJcIjtcbiAgICBvdXRwdXQgKz0gXCI8aW1nIHNyYz1cXFwiXCIgKyByZXNwb25zZS5waWN0dXJlLmRhdGEudXJsICsgXCJcXFwiIHdpZHRoPVxcXCIyNVxcXCIgaGVpZ2h0PVxcXCIyNVxcXCI+PC9pbWc+XCI7XG4gICAgb3V0cHV0ICs9IFwiIFwiICsgcmVzcG9uc2UuZmlyc3RfbmFtZTtcbiAgICByZXR1cm4gJChcIiN1c2VyLWlkZW50aXR5XCIpLmh0bWwob3V0cHV0KTtcbiAgfSk7XG59O1xuXG5oYW5kbGVPR1N1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgbG9nUmVzcG9uc2UoXCJbaGFuZGxlT0dTdWNjZXNzXSBkb25lLlwiKTtcbiAgc2hvd1B1Ymxpc2hDb25maXJtYXRpb24oKTtcbiAgc2VsZWN0ZWRNZWFsSW5kZXggPSAtMTtcbiAgc2VsZWN0ZWRQbGFjZUluZGV4ID0gLTE7XG4gIHNlbGVjdGVkUGxhY2VJRCA9IG51bGw7XG4gIGN1cnJlbnRseVNlbGVjdGVkUGxhY2VFbGVtZW50ID0gbnVsbDtcbiAgc2VsZWN0ZWRGcmllbmRzID0ge307XG4gICQoXCIjc2VsZWN0LW1lYWxcIikuaHRtbChcIlNlbGVjdCBvbmVcIik7XG4gICQoXCIjc2VsZWN0LWxvY2F0aW9uXCIpLmh0bWwoXCJTZWxlY3Qgb25lXCIpO1xuICAkKFwiI3NlbGVjdC1mcmllbmRzXCIpLmh0bWwoXCJTZWxlY3QgZnJpZW5kc1wiKTtcbiAgcmV0dXJuICQoXCIjYW5ub3VuY2VcIikuYWRkQ2xhc3MoXCJ1aS1kaXNhYmxlZFwiKTtcbn07XG5cbmhhbmRsZUdlbmVyaWNFcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgcmV0dXJuIGxvZ1Jlc3BvbnNlKFwiRXJyb3IgLi4uXCIgKyBKU09OLnN0cmluZ2lmeShlKSk7XG59O1xuXG5oYW5kbGVQdWJsaXNoT0dFcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgdmFyIGVycm9yQ29kZTtcbiAgbG9nUmVzcG9uc2UoXCJFcnJvciBwdWJsaXNoaW5nIC4uLlwiICsgSlNPTi5zdHJpbmdpZnkoZSkpO1xuICBlcnJvckNvZGUgPSBlLmNvZGU7XG4gIGxvZ1Jlc3BvbnNlKFwiRXJyb3IgY29kZSAuLi5cIiArIGVycm9yQ29kZSk7XG4gIGlmIChlcnJvckNvZGUgPT09IFwiMjAwXCIpIHtcbiAgICByZXR1cm4gcmVhdXRob3JpemVGb3JQdWJsaXNoUGVybWlzc2lvbnMoKTtcbiAgfVxufTtcblxucmVhdXRob3JpemVGb3JQdWJsaXNoUGVybWlzc2lvbnMgPSBmdW5jdGlvbigpIHtcbiAgbG9nUmVzcG9uc2UoXCJbcmVhdXRob3JpemVGb3JQdWJsaXNoUGVybWlzc2lvbnNdIGFza2luZyBmb3IgYWRkaXRpb25hbCBwZXJtaXNzaW9ucy5cIik7XG4gIHJldHVybiBGQi5sb2dpbigoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICByZXR1cm4gaGFuZGxlR2VuZXJpY0Vycm9yKHJlc3BvbnNlLmVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHB1Ymxpc2hPR0FjdGlvbihyZXNwb25zZSk7XG4gICAgfVxuICB9KSwge1xuICAgIHNjb3BlOiBcInB1Ymxpc2hfYWN0aW9uc1wiXG4gIH0pO1xufTtcblxucHVibGlzaE9HQWN0aW9uID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgdmFyIGVycm9ySGFuZGxlciwgZnJpZW5kSURBcnJheXMsIGZyaWVuZElkLCBwYXJhbXM7XG4gIGVycm9ySGFuZGxlciA9IG51bGw7XG4gIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2UuZXJyb3IpIHtcbiAgICBlcnJvckhhbmRsZXIgPSBoYW5kbGVQdWJsaXNoT0dFcnJvcjtcbiAgfSBlbHNlIHtcbiAgICBlcnJvckhhbmRsZXIgPSBoYW5kbGVHZW5lcmljRXJyb3I7XG4gIH1cbiAgbG9nUmVzcG9uc2UoXCJQdWJsaXNoaW5nIGFjdGlvbi4uLlwiKTtcbiAgcGFyYW1zID0ge1xuICAgIG1lYWw6IG1lYWxzW3NlbGVjdGVkTWVhbEluZGV4XS51cmxcbiAgfTtcbiAgaWYgKHNlbGVjdGVkUGxhY2VJRCkge1xuICAgIHBhcmFtcy5wbGFjZSA9IHNlbGVjdGVkUGxhY2VJRDtcbiAgfVxuICBmcmllbmRJREFycmF5cyA9IFtdO1xuICBmb3IgKGZyaWVuZElkIGluIHNlbGVjdGVkRnJpZW5kcykge1xuICAgIGlmIChzZWxlY3RlZEZyaWVuZHMuaGFzT3duUHJvcGVydHkoZnJpZW5kSWQpKSB7XG4gICAgICBmcmllbmRJREFycmF5cy5wdXNoKGZyaWVuZElkKTtcbiAgICB9XG4gIH1cbiAgaWYgKGZyaWVuZElEQXJyYXlzLmxlbmd0aCA+IDApIHtcbiAgICBwYXJhbXMudGFncyA9IGZyaWVuZElEQXJyYXlzLmpvaW4oKTtcbiAgfVxuICBsb2dSZXNwb25zZShcIlB1Ymxpc2ggcGFyYW1zIFwiICsgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gIHJldHVybiAkLmFqYXgoe1xuICAgIHVybDogXCIvYW5ub3VuY2VcIixcbiAgICB0eXBlOiBcInBvc3RcIixcbiAgICBkYXRhOiBwYXJhbXNcbiAgfSkuc3VjY2VzcyhmdW5jdGlvbihyZXN1bHQpIHtcbiAgICByZXR1cm4gaGFuZGxlT0dTdWNjZXNzKHJlc3VsdCk7XG4gIH0pLmVycm9yKGZ1bmN0aW9uKHhocikge1xuICAgIHRyeSB7XG4gICAgICByZXNwb25zZSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICBpZiAocmVzcG9uc2UuZXJyb3IgJiYgcmVzcG9uc2UucmVkaXJlY3RVcmkpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbiA9IHJlc3BvbnNlLnJlZGlyZWN0VXJpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKF9lcnJvcikge31cbiAgfSk7XG59O1xuXG5zaG93UHVibGlzaENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAkKFwiI2NvbmZpcm1hdGlvblwiKS5hcHBlbmQoXCI8cD5QdWJsaXNoIHN1Y2Nlc3NmdWw8L3A+XCIpO1xuICByZXR1cm4gJChcIiNjb25maXJtYXRpb25cIikuZmFkZU91dCgzMDAwLCBmdW5jdGlvbigpIHtcbiAgICAkKFwiI2NvbmZpcm1hdGlvblwiKS5odG1sKFwiXCIpO1xuICAgIHJldHVybiAkKFwiI2NvbmZpcm1hdGlvblwiKS5zaG93KCk7XG4gIH0pO1xufTtcblxuZGlzcGxheU1lYWxMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvdXRwdXQsIHRtcGw7XG4gIGxvZ1Jlc3BvbnNlKFwiW2Rpc3BsYXlNZWFsTGlzdF0gZGlzcGxheWluZyBtZWFsIGxpc3QuXCIpO1xuICB0bXBsID0gJChcIiNtZWFsX2xpc3RfdG1wbFwiKS5odG1sKCk7XG4gIG91dHB1dCA9IE11c3RhY2hlLnRvX2h0bWwodG1wbCwgbWVhbHMpO1xuICByZXR1cm4gJChcIiNtZWFsLWxpc3RcIikuaHRtbChvdXRwdXQpLmxpc3R2aWV3KFwicmVmcmVzaFwiKTtcbn07XG5cbmRpc3BsYXlTZWxlY3RlZE1lYWwgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG1lYWwsIG91dHB1dCwgdG1wbDtcbiAgbG9nUmVzcG9uc2UoXCJbZGlzcGxheVNlbGVjdGVkTWVhbF0gZGlzcGxheWluZyBzZWxlY3RlZCBtZWFsLlwiKTtcbiAgbWVhbCA9IG1lYWxzW3NlbGVjdGVkTWVhbEluZGV4XTtcbiAgdG1wbCA9ICQoXCIjc2VsZWN0ZWRfbWVhbF90bXBsXCIpLmh0bWwoKTtcbiAgb3V0cHV0ID0gTXVzdGFjaGUudG9faHRtbCh0bXBsLCBtZWFsKTtcbiAgcmV0dXJuICQoXCIjc2VsZWN0ZWRfbWVhbFwiKS5odG1sKG91dHB1dCk7XG59O1xuXG5nZXROZWFyYnkgPSBmdW5jdGlvbigpIHtcbiAgaWYgKG5lYXJieVBsYWNlcykge1xuICAgIHJldHVybjtcbiAgfVxuICBsb2dSZXNwb25zZShcIltnZXROZWFyYnldIGdldCBuZWFyYnkgZGF0YS5cIik7XG4gIHJldHVybiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgbG9nUmVzcG9uc2UobG9jYXRpb24pO1xuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgdXJsOiBcIi9zZWFyY2hcIixcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdHlwZTogXCJwbGFjZVwiLFxuICAgICAgICBxOiBcInJlc3RhdXJhbnRcIixcbiAgICAgICAgY2VudGVyOiBsb2NhdGlvbi5jb29yZHMubGF0aXR1ZGUgKyBcIixcIiArIGxvY2F0aW9uLmNvb3Jkcy5sb25naXR1ZGUsXG4gICAgICAgIGRpc3RhbmNlOiAxMDAwLFxuICAgICAgICBmaWVsZHM6IFwiaWQsbmFtZSxwaWN0dXJlXCJcbiAgICAgIH1cbiAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICBuZWFyYnlQbGFjZXMgPSByZXNwb25zZS5kYXRhO1xuICAgICAgbG9nUmVzcG9uc2UobmVhcmJ5UGxhY2VzKTtcbiAgICAgIHJldHVybiBkaXNwbGF5UGxhY2VzKG5lYXJieVBsYWNlcyk7XG4gICAgfSkuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XG4gICAgICByZXR1cm4gbG9nUmVzcG9uc2UoXCJFcnJvciBmZXRjaGluZyBuZWFyYnkgcGxhY2UgZGF0YS5cIik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZGlzcGxheVBsYWNlcyA9IGZ1bmN0aW9uKHBsYWNlcykge1xuICB2YXIgb3V0cHV0LCB0bXBsO1xuICBsb2dSZXNwb25zZShcIltkaXNwbGF5UGxhY2VzXSBkaXNwbGF5aW5nIG5lYXJieSBsaXN0LlwiKTtcbiAgdG1wbCA9ICQoXCIjcGxhY2VzX2xpc3RfdG1wbFwiKS5odG1sKCk7XG4gIG91dHB1dCA9IE11c3RhY2hlLnRvX2h0bWwodG1wbCwgcGxhY2VzKTtcbiAgcmV0dXJuICQoXCIjcGxhY2VzLWxpc3RcIikuaHRtbChvdXRwdXQpLmxpc3R2aWV3KFwicmVmcmVzaFwiKTtcbn07XG5cbmdldEZyaWVuZHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKG15RnJpZW5kcykge1xuICAgIHJldHVybjtcbiAgfVxuICBsb2dSZXNwb25zZShcIltnZXRGcmllbmRzXSBnZXQgZnJpZW5kIGRhdGEuXCIpO1xuICByZXR1cm4gJC5hamF4KHtcbiAgICB1cmw6IFwiL2ZyaWVuZHNcIlxuICB9KS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgbXlGcmllbmRzID0gcmVzcG9uc2UuZGF0YTtcbiAgICBsb2dSZXNwb25zZShteUZyaWVuZHMpO1xuICAgIHJldHVybiBkaXNwbGF5RnJpZW5kcyhteUZyaWVuZHMpO1xuICB9KS5lcnJvcihmdW5jdGlvbihlcnIpIHtcbiAgICByZXR1cm4gbG9nUmVzcG9uc2UoXCJFcnJvciBmZXRjaGluZyBmcmllbmQgZGF0YS5cIik7XG4gIH0pO1xufTtcblxuZGlzcGxheUZyaWVuZHMgPSBmdW5jdGlvbihmcmllbmRzKSB7XG4gIHZhciBvdXRwdXQsIHRtcGw7XG4gIGxvZ1Jlc3BvbnNlKFwiW2Rpc3BsYXlGcmllbmRzXSBkaXNwbGF5aW5nIGZyaWVuZCBsaXN0LlwiKTtcbiAgdG1wbCA9ICQoXCIjZnJpZW5kc19saXN0X3RtcGxcIikuaHRtbCgpO1xuICBvdXRwdXQgPSBNdXN0YWNoZS50b19odG1sKHRtcGwsIGZyaWVuZHMpO1xuICByZXR1cm4gJChcIiNmcmllbmRzLWxpc3RcIikuaHRtbChvdXRwdXQpLmxpc3R2aWV3KFwicmVmcmVzaFwiKTtcbn07XG5cbiQoZnVuY3Rpb24oKSB7XG4gICQoXCIjbG9nb3V0XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgIHdpbmRvdy5sb2NhdGlvbiA9IFwiL2xvZ291dFwiO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gICQoXCIjYW5ub3VuY2VcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHB1Ymxpc2hPR0FjdGlvbihudWxsKTtcbiAgfSk7XG4gICQoXCIjbWVhbC1saXN0XCIpLm9uKFwiY2xpY2tcIiwgXCJsaVwiLCBmdW5jdGlvbigpIHtcbiAgICBzZWxlY3RlZE1lYWxJbmRleCA9ICQodGhpcykuaW5kZXgoKTtcbiAgICBsb2dSZXNwb25zZShcIkxpbmsgaW4gbWVhbCBsaXN0dmlldyBjbGlja2VkLi4uIFwiICsgc2VsZWN0ZWRNZWFsSW5kZXgpO1xuICAgIHJldHVybiBkaXNwbGF5U2VsZWN0ZWRNZWFsKCk7XG4gIH0pO1xuICAkKFwiI2RldGFpbC1tZWFsLXNlbGVjdFwiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAkKFwiI2Fubm91bmNlXCIpLnJlbW92ZUNsYXNzKFwidWktZGlzYWJsZWRcIik7XG4gICAgcmV0dXJuICQoXCIjc2VsZWN0LW1lYWxcIikuaHRtbChtZWFsc1tzZWxlY3RlZE1lYWxJbmRleF0udGl0bGUpO1xuICB9KTtcbiAgJChcIiNwbGFjZXMtbGlzdFwiKS5vbihcImNsaWNrXCIsIFwibGlcIiwgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGVjdGlvbklkLCBzZWxlY3Rpb25TdGF0dXM7XG4gICAgc2VsZWN0aW9uSWQgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLW5hbWVcIik7XG4gICAgbG9nUmVzcG9uc2UoXCJTZWxlY3RlZCBwbGFjZSBcIiArIHNlbGVjdGlvbklkKTtcbiAgICBzZWxlY3Rpb25TdGF0dXMgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWljb25cIik7XG4gICAgaWYgKHNlbGVjdGlvblN0YXR1cyA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICBpZiAoY3VycmVudGx5U2VsZWN0ZWRQbGFjZUVsZW1lbnQpIHtcbiAgICAgICAgY3VycmVudGx5U2VsZWN0ZWRQbGFjZUVsZW1lbnQuYnV0dG9uTWFya3VwKHtcbiAgICAgICAgICBpY29uOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgICQodGhpcykuYnV0dG9uTWFya3VwKHtcbiAgICAgICAgaWNvbjogXCJjaGVja1wiXG4gICAgICB9KTtcbiAgICAgIHNlbGVjdGVkUGxhY2VJRCA9IHNlbGVjdGlvbklkO1xuICAgICAgc2VsZWN0ZWRQbGFjZUluZGV4ID0gJCh0aGlzKS5pbmRleCgpO1xuICAgICAgJChcIiNzZWxlY3QtbG9jYXRpb25cIikuaHRtbChuZWFyYnlQbGFjZXNbc2VsZWN0ZWRQbGFjZUluZGV4XS5uYW1lKTtcbiAgICAgIHJldHVybiBjdXJyZW50bHlTZWxlY3RlZFBsYWNlRWxlbWVudCA9ICQodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQodGhpcykuYnV0dG9uTWFya3VwKHtcbiAgICAgICAgaWNvbjogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgc2VsZWN0ZWRQbGFjZUlEID0gbnVsbDtcbiAgICAgIHNlbGVjdGVkUGxhY2VJbmRleCA9IC0xO1xuICAgICAgcmV0dXJuICQoXCIjc2VsZWN0LWxvY2F0aW9uXCIpLmh0bWwoXCJTZWxlY3Qgb25lXCIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAkKFwiI2ZyaWVuZHMtbGlzdFwiKS5vbihcImNsaWNrXCIsIFwibGlcIiwgZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZyaWVuZElkLCBmcmllbmROYW1lQXJyYXksIG90aGVyRnJpZW5kcywgc2VsZWN0ZWRJbmRleCwgc2VsZWN0aW9uSWQsIHNlbGVjdGlvblN0YXR1cztcbiAgICBzZWxlY3Rpb25JZCA9ICQodGhpcykuYXR0cihcImRhdGEtbmFtZVwiKTtcbiAgICBsb2dSZXNwb25zZShcIlNlbGVjdGVkIGZyaWVuZCBcIiArIHNlbGVjdGlvbklkKTtcbiAgICBzZWxlY3RlZEluZGV4ID0gJCh0aGlzKS5pbmRleCgpO1xuICAgIHNlbGVjdGlvblN0YXR1cyA9ICQodGhpcykuYXR0cihcImRhdGEtaWNvblwiKTtcbiAgICBpZiAoc2VsZWN0aW9uU3RhdHVzID09PSBcImZhbHNlXCIpIHtcbiAgICAgICQodGhpcykuYnV0dG9uTWFya3VwKHtcbiAgICAgICAgaWNvbjogXCJjaGVja1wiXG4gICAgICB9KTtcbiAgICAgIHNlbGVjdGVkRnJpZW5kc1tzZWxlY3Rpb25JZF0gPSBteUZyaWVuZHNbc2VsZWN0ZWRJbmRleF0ubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCh0aGlzKS5idXR0b25NYXJrdXAoe1xuICAgICAgICBpY29uOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBkZWxldGUgc2VsZWN0ZWRGcmllbmRzW3NlbGVjdGlvbklkXTtcbiAgICB9XG4gICAgZnJpZW5kTmFtZUFycmF5ID0gW107XG4gICAgZm9yIChmcmllbmRJZCBpbiBzZWxlY3RlZEZyaWVuZHMpIHtcbiAgICAgIGlmIChzZWxlY3RlZEZyaWVuZHMuaGFzT3duUHJvcGVydHkoZnJpZW5kSWQpKSB7XG4gICAgICAgIGZyaWVuZE5hbWVBcnJheS5wdXNoKHNlbGVjdGVkRnJpZW5kc1tmcmllbmRJZF0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJpZW5kTmFtZUFycmF5Lmxlbmd0aCA+IDIpIHtcbiAgICAgIG90aGVyRnJpZW5kcyA9IGZyaWVuZE5hbWVBcnJheS5sZW5ndGggLSAxO1xuICAgICAgJChcIiNzZWxlY3QtZnJpZW5kc1wiKS5odG1sKGZyaWVuZE5hbWVBcnJheVswXSArIFwiIGFuZCBcIiArIG90aGVyRnJpZW5kcyArIFwiIG90aGVyc1wiKTtcbiAgICB9IGVsc2UgaWYgKGZyaWVuZE5hbWVBcnJheS5sZW5ndGggPT09IDIpIHtcbiAgICAgICQoXCIjc2VsZWN0LWZyaWVuZHNcIikuaHRtbChmcmllbmROYW1lQXJyYXlbMF0gKyBcIiBhbmQgXCIgKyBmcmllbmROYW1lQXJyYXlbMV0pO1xuICAgIH0gZWxzZSBpZiAoZnJpZW5kTmFtZUFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgJChcIiNzZWxlY3QtZnJpZW5kc1wiKS5odG1sKGZyaWVuZE5hbWVBcnJheVswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoXCIjc2VsZWN0LWZyaWVuZHNcIikuaHRtbChcIlNlbGVjdCBmcmllbmRzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbG9nUmVzcG9uc2UoXCJDdXJyZW50IHNlbGVjdCBmcmllbmRzIGxpc3Q6IFwiICsgc2VsZWN0ZWRGcmllbmRzKTtcbiAgfSk7XG59KTtcblxuJChkb2N1bWVudCkuZGVsZWdhdGUoXCIjbWVhbHNcIiwgXCJwYWdlaW5pdFwiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGRpc3BsYXlNZWFsTGlzdCgpO1xufSk7XG5cbiQoXCJib2R5XCIpLmJpbmQoXCJoaWRlT3Blbk1lbnVzXCIsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJChcInVsOmpxbURhdGEocm9sZT0nbWVudScpXCIpLmZpbmQoXCJsaSA+IHVsXCIpLmhpZGUoKTtcbn0pO1xuXG5tZW51SGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgJChcImJvZHlcIikudHJpZ2dlcihcImhpZGVPcGVuTWVudXNcIik7XG4gICQodGhpcykuZmluZChcImxpID4gdWxcIikuc2hvdygpO1xuICByZXR1cm4gZS5zdG9wUHJvcGFnYXRpb24oKTtcbn07XG5cbiQoXCJ1bDpqcW1EYXRhKHJvbGU9J21lbnUnKSBsaSA+IHVsIGxpXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgJChcImJvZHlcIikudHJpZ2dlcihcImhpZGVPcGVuTWVudXNcIik7XG4gIHJldHVybiBlLnN0b3BQcm9wYWdhdGlvbigpO1xufSk7XG5cbiQoXCJib2R5XCIpLmRlbGVnYXRlKFwidWw6anFtRGF0YShyb2xlPSdtZW51JylcIiwgXCJjbGlja1wiLCBtZW51SGFuZGxlcik7XG5cbiQoXCJib2R5XCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgcmV0dXJuICQoXCJib2R5XCIpLnRyaWdnZXIoXCJoaWRlT3Blbk1lbnVzXCIpO1xufSk7XG4iXX0=
